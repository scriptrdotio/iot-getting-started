var responseObject = {"failure": [], "success": []};
var channels = require("channel");
var devices = require("device");
var users = require("user");
var groups = require("group");


var body = request.body ? request.body : ((request.rawBody) ? request.rawBody : request.parameters);
var inputData = typeof(body) == "string" ? JSON.parse(body) : body;

var deviceId = inputData["deviceId"];
var isPushPull = inputData["isPushPull"]?inputData["isPushPull"]:"push";
var dataChannel = inputData["channel"]?inputData["channel"]:"Creatr";
var usecase = inputData["usecase"]?inputData["usecase"]:"smartfarming";


var saveApplicationGroup = groups.create("application");
if(saveApplicationGroup.metadata.status == "failure" && saveApplicationGroup.metadata.errorCode != "DUPLICATE_GROUP_NAME"){
    responseObject.failure.push("Failure to create a group \"application\", which is used to identify authenticated applications sending on behalf of devices data to scriptr");
} else {
    responseObject.success.push("Group \"application\", which is used to identify authenticated applications sending on behalf of devices data to scriptr is available.");
}


var saveDeviceGroup = groups.create("device");
if(saveDeviceGroup.metadata.status == "failure" && saveDeviceGroup.metadata.errorCode != "DUPLICATE_GROUP_NAME"){
    responseObject.failure.push("Failure to create a group \"device\"sending data directly to scriptr is available. "+saveDeviceGroup.metadata.errorDetail);
} else {
     responseObject.success.push("Group \"device\" which allows to identify an authenticated device is sending data directly to scriptr is available.");
}


if(deviceId && isPushPull && isPushPull == "push") {
    var updateDeviceGroups = devices.save({"id": deviceId, "groups":["device"]});
    if(updateDeviceGroups.metadata.status == "failure" ) {
        responseObject.failure.push("Failure to add device "+ deviceId + " to group \"device\"");
    } else {
        responseObject.success.push("Success adding device "+ deviceId + " to group \"device\"");
    }
} else if(deviceId && isPushPull && isPushPull == "pull"){
    //"groups": {"append":["device"], "delete":["application"]}
    var updateDeviceGroups = devices.save({"id": deviceId, "groups": ["application"]});
     if(updateDeviceGroups.metadata.status == "failure" ) {
        responseObject.failure.push("Failure to add device "+ deviceId + " to group \"application\"");
    } else {
        responseObject.success.push("Success adding device "+ deviceId + " to group \"application\"");
    }
}



/** Create a group editor that allows its users to access the scriptr ide plugins, ex: decision table **/
var saveEditorGroup = groups.create("editor");
if(saveEditorGroup.metadata.status == "failure"  && saveEditorGroup.metadata.errorCode != "DUPLICATE_GROUP_NAME"){
    responseObject.failure.push("Create a group editor which allows its users to access the scriptr ide plugins when logged in to the app failed.");
} else {
     responseObject.success.push("The group editor which allows its users to access the scriptr ide plugins when logged in to the app is available.");
}


/** Setup account default domain if none is set **/
var subdomain = request.account.accountKey;
var params = {
    "apsdb.name": subdomain
}

var saveSubdomain = apsdb.callApi("SaveSubdomain", params, null); 
if(saveSubdomain.metadata.status == "failure" && saveSubdomain.metadata.errorCode != "MAX_SUBDOMAINS_EXCEEDED") {
	responseObject.failure.push(JSON.stringify("Failed to generate a subdomain for your account under scriptrapps.io on which your APIs will be exposed. A subdomain is needed for the application to call your public APIs without passing the anonymous token. You can always set your account subdomain from the IDE \"Account\" tab."));
} else if(saveSubdomain.metadata.status == "success" && saveSubdomain.metadata.errorCode != "MAX_SUBDOMAINS_EXCEEDED"){
    responseObject.success.push(JSON.stringify("A subdomain was generated for your account under scriptrapps.io on which your APIs will be exposed. This will also allow users to call your public APIs without passing the anonymous token. You can always change your account subdomain from the IDE \"Account\" tab."));
} 

var configurationSettings = {"apsdb.optionalBindReferrer": "true"};
var saveConfiguration = apsdb.callApi("SaveConfiguration", configurationSettings, null)
if(saveConfiguration.metadata.status == "failure"){
   responseObject.failure.push("Setup account user tokens not bound to the referrer failed."+ saveConfiguration.metadata.errorDetail);
} else {
    responseObject.success.push("Setup account user tokens not bound to the referrer is successful.");
}

/** Create Anonymous publish channel used to receive requests from browser **/
var channelsList =  ["requestChannel", "responseChannel"];
var options = {
  "subscribeACL": "anonymous",
  "publishACL": "anonymous"
}
var saveChannel = null;
channelsList.forEach(function(channel) {
   saveChannel = channels.create(channel, options);
});

if(saveChannel.metadata.status == "failure" && saveChannel.metadata.errorCode !== "DUPLICATE_CHANNEL"){
       responseObject.failure.push("Create application needed channels error. "+saveChannel.metadata.errorDetail);
    } else {
         responseObject.success.push("Application needed channels \"requestChannel\" & \"responseChannel\" are available.");
    }

//create users to be used to login to the app
var usersList = [ //Device used to login to iot app
    {  
        "id":"admin",
        "password" : "admin",
        "name" : "admin",
        "email": request.account.adminEmail,
        "groups": ["editor"]
    }
];

usersList.forEach(function(params) {
  var saveUser= users.save(params);
    
    if(saveUser.metadata.status == "failure"){
       responseObject.failure.push("Creating user/password to login to sample application. "+saveUser.metadata.errorDetail);
    } else {
       responseObject.success.push("Create admin/admin user to login to sample application.");
    }
});



var pubsub = require("pubsub");
var topic = pubsub.getInstance(dataChannel);
var response = topic.subscribe(usecase+"/app/api/subscription/subscriber", "script");
if(response.metadata.status == "failure" && response.metadata.errorCode != "CALLBACK_SUBSCRIBED") {
     responseObject.failure.push("Failed to subscribe the script " + usecase +"/app/api/subscription/subscriber to the channel " + dataChannel + "." + response.metadata.errorDetail);
} else {
    responseObject.success.push("The script " + usecase +"/app/api/subscription/subscriber was successfully subscribed to ingest data from the channel " + dataChannel + ".");
}

return responseObject;
