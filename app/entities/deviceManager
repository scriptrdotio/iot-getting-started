
var document = require("document");
var device = require("device");
var utils = require("./utils");

var config = require("../config/config");

var _= require("modules/underscore/underscore.js")._;
var defaultStore = require("timeseries").getInstance("DefaultStore");
var alertStore = require("timeseries").getInstance("AlertStore");
var log = require("log");
log.setLevel("INFO");

var event_prefix = "device_event_";
var alert_prefix = "device_alert_";
var type = "hardware";
var deviceGroup = config.deviceGroup


function getLatestDeviceEntryTimescale(id) {
    var key = event_prefix + id;
    var filter = {
           "query" : "id = '"+key+"'",
           "limit": 1
    };
    var result = defaultStore.query(filter);
    if(result.result && result.result.length>0 )
	    return result.result[0];
    else
	    return null;
}
function getLatestDeviceEntry(id) {
   var key = event_prefix + id;
  
   var params = {
       "query" : "key like \""+key+"_%\"",
       "fields": "*",
       "sort": "creationDate<date:DESC>",
       "resultsPerPage": 1
   }
   var result = document.query(params);

   if(result.metadata.status == "success" && result.result.documents.length > 0) {
        return result.result.documents[0];
   } else {
        return null;
   }
}

function getDeviceAlertsEntriesTimescale(id) {
   var key = alert_prefix + id;
    var filter = {
           "query" : "id = '"+key+"'"
    };
    log.info(">>>>>>>>>key " + key);
    var result = alertStore.query(filter);
    if(result.result && result.result.length>0 )
	    return result.result;
    else
	    return null;
        
}

function getDeviceAlertsEntries(id) {
   var key = event_prefix + id;;
   var params = {
       "query" : "key like \""+key+"_%\" and event_type in [\"alert\"]",
       "fields": "*",
       "sort": "creationDate<date:DESC>"
        
   }
   
   var result = document.query(params);
   if(result.metadata.status == "success" && result.result.documents.length > 0) {
        return result.result.documents;
   } else {
        return null;
   }
}

function getDeviceHistoricalEntriesTimescale(id) {
    var key = event_prefix + id;
    var filter = {
           "query" : "id = '"+key+"'"
    };
    var result = defaultStore.query(filter);
    if(result.result && result.result.length>0 )
	    return result.result;
    else
	    return null;
}

/**
 * @function listHistory
 * @param {String} id: the device's id
 * @return {ArrayList} list of historical device data
 */
function getDeviceHistoricalEntries(id) {
   var key = event_prefix + id;;
   
   var params = {
       "query" : "key like \""+key+"_%\"",
       "fields": "*"
   }
   
   var result = document.query(params);
   if(result.metadata.status == "success" && result.result.documents.length > 0) {
        return result.result.documents;
   } else {
        return null;
   }
}
/*
function buildDeviceEventDocument(entry, data) {
    _.extendOwn(entry, data);
    delete entry.auth_token;
    delete entry.versionNumber;
    delete entry.latest;
    delete entry.creator;
    delete entry.groups;
    delete entry["apsdb.update"];

    entry["event_type"] = ["event"];
    entry["key"] = event_prefix + entry.id;
 	entry["meta.types"] = {
        "temperature": "numeric",
        "humidity": "numeric",
        "pressure": "numeric"
   	}
    return entry;
}*/

function saveDeviceEvent(entry) {
    log.info("[app/entities/devicemanager] saving device event."+JSON.stringify(entry))
	var records = [];
    var d = new Date();
    d.setSeconds(d.getSeconds() + 2);
    var ts = d.toISOString().replace("T", " ").replace("Z", "").substring(0,19);
    var fields = {
        "id": (event_prefix + entry.id),
        "timestamp": ts,
        "long": convertFloat(entry.long),
        "lat": convertFloat(entry.lat),
        "pressure": convertFloat(entry.pressure),
        "humidity": convertFloat(entry.humidity),
        "temperature": convertFloat(entry.temperature),     
        "battery": convertFloat(entry.soil_temp), 
        "pluviometer_1": convertFloat(entry.pluviometer_1), 
        "pluviometer_2": convertFloat(entry.pluviometer_2), 
        "pluviometer_3": convertFloat(entry.pluviometer_3), 
        "soil_moisture": convertFloat(entry.soil_moisture), 
        "anemometer": convertFloat(entry.anemometer), 
        "wind_direction": convertFloat(entry.wind_direction), 
        "soil_temperature": convertFloat(entry.soil_temperature), 
        "grideye": "grid-1"
    }
    records.push(fields);
    var test = defaultStore.log(records);
}

function saveDeviceAlerts(deviceId, alertsType) {
    var d = new Date();
    d.setSeconds(d.getSeconds() + 2);
    var ts = d.toISOString().replace("T", " ").replace("Z", "").substring(0,19);
    var records = [];            
    for(var i=0; i<alertsType.length; i++){
        var fields = {
            "id": (alert_prefix + deviceId),
            "timestamp": ts,
            "alert_type": alertsType[i],
            "alert_message": "this is a message"
        };
        records.push(fields);
    }
    
    alertStore.log(records);
}

function convertFloat(f){
	if(f)
	    return parseFloat(f);
    else
    	return null;
}

function getRandomInRange(from, to, fixed) {
    return (Math.random() * (to - from) + from).toFixed(fixed) * 1
}

function buildDeviceDefinitionDocument(entry) {
    entry["id"] = entry.id;
    entry["password"] = utils.generate();
    entry["type"] = type;
    entry["groups"] = deviceGroup;
    return entry;
}

function saveDeviceDefinition(entry) {
   return device.save(entry);
}

function getDeviceDefinition(id) {
    var params = {
       "query" : "id =\""+ id +"\"",
       "fields": "country,city,source,locationType,locationSection,physicalEnvironment,sensor,address,long,lat,event_type,id"
   }
   var result = device.query(params);
   if(result.metadata.status == "success") {
        return result.result.devices[0];
   } else {
        return null;
   }
}


function getAllDevicesDefinition() {

   var params = {
       "query" : "type =\""+ type +"\" or groups in [\""+config.deviceGroup+"\"]",
       "fields": "*"
   }
   
   var result = device.query(params);
   if(result.metadata.status == "success" && result.result.devices.length > 0) {
        return result.result.devices;
   } else {
        return null;
   }
}
